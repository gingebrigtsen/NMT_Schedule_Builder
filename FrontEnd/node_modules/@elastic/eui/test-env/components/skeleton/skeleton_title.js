"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EuiSkeletonTitle = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _services = require("../../services");

var _skeleton_loading = require("./skeleton_loading");

var _skeleton_title = require("./skeleton_title.styles");

var _react2 = require("@emotion/react");

var _excluded = ["isLoading", "size", "className", "contentAriaLabel", "ariaWrapperProps", "children"];

var EuiSkeletonTitle = function EuiSkeletonTitle(_ref) {
  var _ref$isLoading = _ref.isLoading,
      isLoading = _ref$isLoading === void 0 ? true : _ref$isLoading,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? 'm' : _ref$size,
      className = _ref.className,
      contentAriaLabel = _ref.contentAriaLabel,
      ariaWrapperProps = _ref.ariaWrapperProps,
      children = _ref.children,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var euiTheme = (0, _services.useEuiTheme)();
  var styles = (0, _skeleton_title.euiSkeletonTitleStyles)(euiTheme);
  var cssStyles = [styles.euiSkeletonTitle, styles[size]];
  return (0, _react2.jsx)(_skeleton_loading.EuiSkeletonLoading, (0, _extends2.default)({
    isLoading: isLoading,
    loadingContent: (0, _react2.jsx)("span", (0, _extends2.default)({
      className: (0, _classnames.default)('euiSkeletonTitle', className),
      css: cssStyles
    }, rest)),
    loadedContent: children || '',
    contentAriaLabel: contentAriaLabel
  }, ariaWrapperProps));
};

exports.EuiSkeletonTitle = EuiSkeletonTitle;
EuiSkeletonTitle.propTypes = {
  className: _propTypes.default.string,
  "aria-label": _propTypes.default.string,
  "data-test-subj": _propTypes.default.string,
  css: _propTypes.default.any,

  /**
     * When true, shows the loading skeleton component.
     * When false, shows any `children` and announces to screen readers that your content has loaded.
     */
  isLoading: _propTypes.default.bool,

  /**
     * Label your loading sections to provide more helpful context to screen readers.
     * For example, pass "API keys" to have screen readers read "Loading API keys" and "Loaded API keys".
     */
  contentAriaLabel: _propTypes.default.string,

  /**
     * Any optional props to pass to the `aria-busy` wrapper around the skeleton content
     */
  ariaWrapperProps: _propTypes.default.any,

  /**
       * EuiTitle size to render
       */
  size: _propTypes.default.any
};