"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _react = _interopRequireWildcard(require("react"));

var _delay_render = require("./delay_render");

var _form = require("../form");

var _flex = require("../flex");

var _loading = require("../loading");

var _react2 = require("@emotion/react");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var DelayRender = function DelayRender() {
  var _useState = (0, _react.useState)(1000),
      _useState2 = _slicedToArray(_useState, 2),
      minimumDelay = _useState2[0],
      setDelay = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      render = _useState4[0],
      setRender = _useState4[1];

  var onChangeMinimumDelay = function onChangeMinimumDelay(event) {
    setDelay(parseInt(event.target.value, 10));
  };

  var onChangeHide = function onChangeHide(event) {
    setRender(event.target.checked);
  };

  var status = render ? 'showing' : 'hidden';
  var label = "Child (".concat(status, ")");
  return (0, _react2.jsx)(_react.default.Fragment, null, (0, _react2.jsx)(_flex.EuiFlexItem, null, (0, _react2.jsx)(_form.EuiFormRow, null, (0, _react2.jsx)(_form.EuiCheckbox, {
    id: "dummy-id",
    checked: render,
    onChange: onChangeHide,
    label: "Show child"
  })), (0, _react2.jsx)(_form.EuiFormRow, {
    label: "Minimum delay"
  }, (0, _react2.jsx)(_form.EuiFieldNumber, {
    value: minimumDelay,
    onChange: onChangeMinimumDelay
  })), (0, _react2.jsx)(_form.EuiFormRow, {
    label: label
  }, render ? (0, _react2.jsx)(_delay_render.EuiDelayRender, {
    delay: minimumDelay
  }, (0, _react2.jsx)(_loading.EuiLoadingSpinner, {
    size: "m"
  })) : (0, _react2.jsx)(_react.default.Fragment, null))));
};

beforeEach(function () {
  cy.realMount((0, _react2.jsx)(DelayRender, null));
});
describe('EuiDelayRender', function () {
  describe('Automated accessibility check', function () {
    it('has zero violations on first render', function () {
      cy.checkAxe();
    });
    it('has zero violations when the show child input is checked', function () {
      cy.get('input.euiCheckbox__input').realClick();
      cy.get('div.euiFormRow__fieldWrapper').last().find('span[role="progressbar"]', {
        timeout: 5000
      }).should('exist');
      cy.checkAxe();
    });
    it('has zero violations when the show child input is pressed', function () {
      cy.realPress('Tab');
      cy.get('input.euiCheckbox__input').should('have.focus');
      cy.realPress('Space');
      cy.get('div.euiFormRow__fieldWrapper').last().find('span[role="progressbar"]', {
        timeout: 5000
      }).should('exist');
      cy.checkAxe();
    });
    it('has zero violations when the show child input is toggled', function () {
      cy.realPress('Tab');
      cy.get('input.euiCheckbox__input').should('have.focus');
      cy.realPress('Space');
      cy.get('div.euiFormRow__fieldWrapper').last().find('span[role="progressbar"]', {
        timeout: 5000
      });
      cy.realPress('Space');
      cy.get('div.euiFormRow__fieldWrapper').last().find('span[role="progressbar"]', {
        timeout: 5000
      }).should('not.exist');
      cy.checkAxe();
    });
  });
});